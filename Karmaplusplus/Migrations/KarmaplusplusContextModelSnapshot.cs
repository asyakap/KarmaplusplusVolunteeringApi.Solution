// <auto-generated />
using Karmaplusplus.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Karmaplusplus.Migrations
{
    [DbContext(typeof(KarmaplusplusContext))]
    partial class KarmaplusplusContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Karmaplusplus.Models.Volunteering", b =>
                {
                    b.Property<int>("VolunteeringId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Date")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("Location")
                        .HasColumnType("longtext");

                    b.Property<string>("Time")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .HasColumnType("longtext");

                    b.Property<string>("VolunteeringName")
                        .HasColumnType("longtext");

                    b.Property<string>("ZipCode")
                        .HasColumnType("longtext");

                    b.HasKey("VolunteeringId");

                    b.ToTable("Volunteerings");

                    b.HasData(
                        new
                        {
                            VolunteeringId = 1,
                            Date = "06/01/2023",
                            Description = "Alki beach cleanup, no tools necessary, dress accordingly",
                            Email = "clean.beaches@gmail.com",
                            Location = "Alki Beach",
                            Time = "10:00 AM - 2 PM",
                            UserId = "f9eb9311-a088-4b39-8c27-d92990b37433",
                            VolunteeringName = "Beach clean up",
                            ZipCode = "98116"
                        },
                        new
                        {
                            VolunteeringId = 2,
                            Date = "every Saturday",
                            Description = "Need help with cooking and distributing free hot meals",
                            Email = "free.meals@gmail.com",
                            Location = "9050 16th Avenue SW, Seattle",
                            Time = "11 AM - 3 PM",
                            UserId = "f9eb9311-a088-4b39-8c27-d92990b37433",
                            VolunteeringName = "Free hot meals",
                            ZipCode = "98106"
                        },
                        new
                        {
                            VolunteeringId = 3,
                            Date = "every Wednesday and Friday",
                            Description = "Need English language teachers to organize classes for recent immigrants from the Ukraine",
                            Email = "free.english@gmail.com",
                            Location = "Lucky Pen, Redmond",
                            Time = "11 AM - 12:30 PM",
                            UserId = "f9eb9311-a088-4b39-8c27-d92990b37433",
                            VolunteeringName = "English lessons",
                            ZipCode = "98052"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
